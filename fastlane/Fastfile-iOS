# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do

  ARCHIVE_FILE = "archive_path.txt"

  desc "Bootstraps dependencies"
  private_lane :bootstrap do |options|
    Dir.chdir(options[:project_directory]) do
      if !File.file?("Cartfile.resolved")
        UI.user_error!("Cartfile.resolved not found: please run \"carthage update --platform iOS --no-build\" and retry.")
        next
      end
      private_cartfile = "Cartfile.private"
      if File.file?(private_cartfile) && File.readlines(private_cartfile).grep(/Cuckoo/).size > 0
        sh "rm -rf \"Carthage/Checkouts/Cuckoo\""
        sh "carthage checkout Cuckoo"
      end
      sh "rome download --platform iOS"
      sh "rome list --missing --platform iOS | awk '{print $1}' | xargs carthage bootstrap --platform iOS --cache-builds"
      sh "rome list --missing --platform iOS | awk '{print $1}' | xargs rome upload --platform iOS"
    end
  end

  desc "Runs SwiftLint"
  private_lane :lint do |options|
    swiftlint(
      mode: :lint,
      path: options[:project_directory],
      output_file: options[:project_directory] + "/swiftlint-results.xml",
      reporter: "checkstyle",
      config_file: ".swiftlint.yml"
    )
  end

  desc "Runs tests"
  private_lane :test do |options|
    derived_data_path = options[:project_directory] + "/Build/"
    clear_derived_data(derived_data_path: derived_data_path)
    failedScan = false

    begin
      scan(workspace: get_main_workspace,
           scheme: options[:scheme],
           clean: true,
           code_coverage: true,
           derived_data_path: derived_data_path)
    rescue => ex
      failedScan = true
      puts ex
    end

    options[:derived_data_path] = derived_data_path
    # TODO: esiste un plugin per fastlane (da provare con Xcode 11): https://github.com/TitouanVanBelle/fastlane-plugin-xchtmlreport
    Dir.chdir("..") do
      sh "xchtmlreport -r #{"\"" + derived_data_path + "\"/Logs/Test/*.xcresult/"}"
    end

    extract_coverage(options)

    if failedScan
       UI.error "Scan failed"
       raise 'Scan failed'
    end
  end

  desc "Runs SDK tests for projects without a workspace"
  private_lane :test_prj do |options|
    derived_data_path = options[:project_directory] + "/Build/"
    clear_derived_data(derived_data_path: derived_data_path)
    scan(project: options[:project],
       scheme: options[:scheme],
       clean: true,
       code_coverage: true,
       derived_data_path: derived_data_path)

    # TODO: esiste un plugin per fastlane (da provare con Xcode 11): https://github.com/TitouanVanBelle/fastlane-plugin-xchtmlreport
    Dir.chdir("..") do
   	  sh "xchtmlreport -r #{"\"" + derived_data_path + "\"/Logs/Test/*.xcresult/"}"
    end

    options[:derived_data_path] = derived_data_path
    extract_coverage(options)
  end

  desc "Builds and archives the specified scheme"
  private_lane :archive do |options|
    scheme = sh("cat \"#{options[:config_path]}\" | grep scheme | cut -d= -f2 | tr -d '\n'")
    workspace = get_main_workspace()
    if workspace.nil? || workspace.empty?
        project = sh("cat \"#{options[:config_path]}\" | grep project | cut -d= -f2 | tr -d '\n'")
        gym(project: project,
            scheme: scheme,
            skip_package_ipa: true,
            skip_archive: options[:skip_archive],
            xcargs: "SKIP_INSTALL=NO",
            configuration: "Release")
    else
        gym(workspace: workspace,
            scheme: scheme,
            skip_package_ipa: true,
            skip_archive: options[:skip_archive],
            xcargs: "SKIP_INSTALL=NO",
            configuration: "Release")
    end
  end

  desc "Publishes the SDK framework to Artifactory"
  private_lane :deploy_framework do |options|
    config_path = options[:config_path]
    framework_path = options[:framework_path]
    xc = options.key?(:xc) ? " -x" : ""

    sh "curl https://raw.githubusercontent.com/aliaslab-1984/fastlane-utils/master/artifactory_publish.sh | bash -s -- -c \"#{config_path}\" -f \"#{framework_path}\"#{xc}"
  end

# -- Build static 

  desc "Build a universal static library"
  private_lane :build_static_library do |options|
    Dir.chdir("../" + options[:prj_dir]) do
        sh "curl https://raw.githubusercontent.com/aliaslab-1984/fastlane-utils/master/make_static.sh | bash -s"
    end
  end

  desc "Build a device-only static library"
  private_lane :build_device_static_library do |options|
    Dir.chdir("../" + options[:prj_dir]) do
        sh "curl https://raw.githubusercontent.com/aliaslab-1984/fastlane-utils/master/make_static.sh | bash -s -- -d"
    end
  end

  desc "Build a simulator static library"
  private_lane :build_simul_static_library do |options|
    Dir.chdir("../" + options[:prj_dir]) do
        sh "curl https://raw.githubusercontent.com/aliaslab-1984/fastlane-utils/master/make_static.sh | bash -s -- -s"
    end
  end

# -- Deploy static 

  desc "Deploy a universal static library"
  private_lane :deploy_static_library do |options|
    Dir.chdir("../" + options[:prj_dir]) do
        sh "curl https://raw.githubusercontent.com/aliaslab-1984/fastlane-utils/master/artifactory_publish_slib.sh | bash -s -- -u"
    end
  end

  desc "Deploy a device-only static library"
  private_lane :deploy_device_static_library do |options|
    Dir.chdir("../" + options[:prj_dir]) do
        sh "curl https://raw.githubusercontent.com/aliaslab-1984/fastlane-utils/master/artifactory_publish_slib.sh | bash -s -- -d"
    end
  end

  desc "Deploy a simulator static library"
  private_lane :deploy_simul_static_library do |options|
    Dir.chdir("../" + options[:prj_dir]) do
        sh "curl https://raw.githubusercontent.com/aliaslab-1984/fastlane-utils/master/artifactory_publish_slib.sh | bash -s -- -s"
    end
  end

# --

  # Called even from local fastlanes
  private_lane :remove_archive_file do
    if File.exist?(ARCHIVE_FILE)
        File.delete(ARCHIVE_FILE)
    end
  end

  desc "Rebuilds the framework"
  private_lane :build_framework do |options|
    remove_archive_file()
    config_path = get_artifactory_config(config_name: options[:config_name])
    archive_path = archive(skip_archive: options[:skip_archive], config_path: config_path)
    if archive_path != nil
        File.open(ARCHIVE_FILE, 'w') { |file| file.write(archive_path) }
        UI.success "Framework archived in:"
        UI.success archive_path
    end
  end

  desc "Publishes the framework to Artifactory"
  private_lane :deploy_built_framework do |options|
    framework_path = built_framework_path(sdk_project_directory: options[:sdk_project_directory])
    config_path = get_artifactory_config(config_name: options[:config_name])
    deploy_framework(config_path: config_path, framework_path: framework_path)
  end

  desc "Builds XCFramework"
  private_lane :build_xc_framework do |options|
    Dir.chdir("../" + options[:sdk_directory]) do

      ENV["PROJECT_DIR"] = Dir.pwd
      ENV["CONFIGURATION"] = "Release"
      ENV["BUILD_DIR"] = options[:build_dir]

      sh "curl https://raw.githubusercontent.com/aliaslab-1984/fastlane-utils/master/build_xcframework.sh | bash -s -- -f \"#{options[:project_name]}\""
    end
  end

  desc "Deploys XCFramework"
  private_lane :deploy_xc_framework do |options|
    config_path = get_artifactory_config(config_name: options[:artifactory_properties])
    Dir.chdir("../" + options[:sdk_directory]) do
      xcframework_path = "Output/" + options[:project_name].gsub(/ /, '_') + "-Release"
      deploy_framework(config_path: config_path, framework_path: xcframework_path, xc: true)
    end
  end
  
  desc "Launches Sonar Scanner"
  lane :sonarAnalysis do |options|
    sh "cd #{options[:sdk_directory]}"
    sh "sonar-scanner"
  end

  desc "Builds and check universal framework"
  lane :build_check_universal_framework do
    build_universal_framework()
    check_framework_univ()
  end

  desc "Builds and check device-only framework"
  lane :build_check_device_framework do
    build_device_framework()
    check_framework_dev()
  end

  desc "Builds and check XCFramework"
  lane :build_check_xc_framework do
    build_xcframework()
    check_framework_xc()
  end

  desc "Checks universal framework"
  private_lane :check_universal_framework do |options|
    framework_bin = get_universal_framework_bin(deployment_info_directory: options[:sdk_project_directory])
    check_framework_bin(bin_name: framework_bin)
  end

  desc "Checks device only framework"
  private_lane :check_device_framework do |options|
    framework_path = get_device_framework_path()
    framework_name = get_device_framework_name(config_name: options[:config_name])
    check_framework_bin(bin_name: "#{framework_path}/#{framework_name}")
  end

  private_lane :check_framework_bin do |options|
      architectures = sh("lipo -archs \"#{options[:bin_name]}\"").split(" ")
      UI.header "Architectures: #{architectures}"
      sh "curl https://raw.githubusercontent.com/aliaslab-1984/fastlane-utils/master/check_framework.sh | bash -s -- \"#{options[:bin_name]}\""
  end

  desc "Checks XCFramework"
  private_lane :check_xc_framework do |options|
    Dir.chdir("../" + options[:sdk_directory]) do
      framework_name = options[:project_name].gsub(/ /, '_')
      configuration = "Release"
      xcframework_path = "Output/#{framework_name}-#{configuration}/#{framework_name}.xcframework"
      Dir.glob("#{xcframework_path}/*").each do |file|
        next if !File.directory?(file) # skip the loop if the file is not a directory
        UI.message file
        UI.important File.basename(file)
        sdk = "#{file}/#{framework_name}.framework/#{framework_name}"
        check_framework_bin(bin_name: sdk)
      end
    end
  end

  private_lane :extract_coverage do |options|
    derived_data_path = options[:derived_data_path]
    conversion_script = "fastlane/converter.swift"
    xccov_report_file = "fastlane/xccov_report.json"
    cobertura_report_file = "fastlane/cobertura_report.xml"
    file_list = "fastlane/filelist"
    detail_cov_path = "fastlane/linescov/"
    Dir.chdir("..") do
        working_directory = `pwd | sed -e \"s/^\\/private//\" | tr -d '\n'`

        sh "if [ -f #{cobertura_report_file} ]; then rm #{cobertura_report_file}; fi"
        sh "if [ -f #{xccov_report_file} ]; then rm #{xccov_report_file}; fi"

        sh "xcrun xccov view --archive --file-list #{"\"" + derived_data_path + "\"/Logs/Test/*.xcresult/"} > #{file_list}"
        sh "if [ -e #{detail_cov_path} ]; then rm -rf #{detail_cov_path}; fi"
        sh "mkdir #{detail_cov_path}"
        sh "while read f; do OUTNAME=$(basename \"$f\"); xcrun xccov view --archive --file \"$f\" #{"\"" + derived_data_path + "\"/Logs/Test/*.xcresult/"} > #{detail_cov_path}$OUTNAME.cov; done < #{file_list}"
        sh "curl https://raw.githubusercontent.com/aliaslab-1984/fastlane-utils/master/xccov_converter.swift > #{conversion_script}; chmod +x #{conversion_script}"
        sh "xcrun xccov view --report #{"\"" + derived_data_path + "\"/Logs/Test/*.xcresult/"} --json > #{xccov_report_file}"

        # swift-sh issue #111: https://github.com/mxcl/swift-sh/issues/111
        # system doesn't log the operation
        UI.header "./#{conversion_script} -i #{xccov_report_file} -d \"#{working_directory}\" -t #{options[:coverage_target]} -c #{detail_cov_path} > #{cobertura_report_file}"
        unless system("./#{conversion_script} -i #{xccov_report_file} -d \"#{working_directory}\" -t #{options[:coverage_target]} -c #{detail_cov_path} > #{cobertura_report_file}")
            sh "alconverter -i #{xccov_report_file} -d \"#{working_directory}\" -t #{options[:coverage_target]} -c #{detail_cov_path} > #{cobertura_report_file}"
        end
    end
  end

  private_lane :built_framework_path do |options|
    device_framework_path = get_device_framework_path()
    if device_framework_path.nil? || device_framework_path.empty?
      device_framework_path = get_universal_framework_path(deployment_info_directory: options[:sdk_project_directory])
    end
    device_framework_path
  end

  lane :get_device_framework_path do
    framework_path = nil
    if File.exist?(ARCHIVE_FILE)
      archive_path = File.read("archive_path.txt")
      if Dir.exist?(archive_path)
          framework_path = "#{archive_path}/Products/Library/Frameworks"
      end
    end
    UI.success "framework_path: #{framework_path}"
    framework_path
  end

  private_lane :get_universal_framework_path do |options|
    framework_path_file = "../#{options[:deployment_info_directory]}/deployment_path.txt"
    framework_path = sh("head -n 1 \"#{framework_path_file}\"").chomp

    Dir.glob(framework_path + "*-Universal.framework").each do |f|
      g = f.sub("-Universal", "")
      sh("mv \"#{f}\" \"#{g}\"")
    end

    framework_path
  end

  private_lane :get_universal_framework_bin do |options|
      framework_path_file = "../#{options[:deployment_info_directory]}/deployment_path.txt"
      file = File.open framework_path_file
      file.gets
      bin = file.gets
      file.close
      bin.chomp
  end

  private_lane :get_device_framework_name do |options|
    config_path = get_artifactory_config(config_name: options[:config_name])
    frameworkName = sh("cat \"#{config_path}\" | grep frameworkName | cut -d= -f2").chomp
    UI.message "frameworkName: #{frameworkName}"
    "#{frameworkName}.framework/#{frameworkName}"
  end

  private_lane :get_artifactory_config do |options|
    Dir.chdir("..") do
      artifactory_config = Dir.glob("./**/#{options[:config_name]}")[0]
      # from relative: "./relative/artifactory.properties" to absolute: "abs/path/relative/artifactory.properties"
      artifactory_config.sub(".", Dir.pwd)
    end
  end

  private_lane :get_main_workspace do
    Dir.chdir("..") do
      sh "find . -name \"*.xcworkspace\" -not -path \"*Carthage*\" -and -not -path \"*xcodeproj*\" -and -not -path \"*SourcePackages*\" | tr -d '\n'"
    end
  end

end
